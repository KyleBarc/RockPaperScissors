#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library.
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);                                   //oled driver setup 

//Bitmaps

// 'rock', 32x32px
const unsigned char rock_img [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
  0x00, 0x07, 0xfc, 0x00, 0x00, 0x3e, 0x0e, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x03, 0xc0, 0x03, 0x80,
  0x0f, 0x00, 0x0f, 0xc0, 0x1c, 0x00, 0x1f, 0xf0, 0x3e, 0x00, 0x3f, 0xf8, 0x3f, 0x00, 0xff, 0xfc,
  0x3f, 0x83, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xf8,
  0x1f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xfe, 0x00, 0x01, 0xff, 0xf0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'paper', 32x32px
const unsigned char paper_img [] PROGMEM = {
  0x1f, 0xff, 0xe0, 0x00, 0x38, 0x00, 0x78, 0x00, 0x30, 0x00, 0x3c, 0x00, 0x30, 0x00, 0x36, 0x00,
  0x30, 0x00, 0x33, 0x80, 0x30, 0x00, 0x31, 0xc0, 0x31, 0xfe, 0x30, 0xe0, 0x30, 0x00, 0x30, 0x70,
  0x30, 0x00, 0x30, 0x38, 0x30, 0x00, 0x3f, 0xfc, 0x30, 0x00, 0x00, 0x0c, 0x31, 0xff, 0xc0, 0x0c,
  0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c, 0x31, 0xff, 0xff, 0x8c,
  0x31, 0xff, 0xff, 0x8c, 0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c,
  0x31, 0xff, 0xff, 0x8c, 0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c,
  0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x7f, 0x8c, 0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c,
  0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c, 0x1f, 0xff, 0xff, 0xf8
};

// 'scissors', 32x32px
const unsigned char scissors_img [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x61, 0x80, 0x00, 0x1c,
  0x41, 0x80, 0x00, 0x7e, 0x61, 0x80, 0x01, 0xf8, 0x7f, 0x00, 0x07, 0xf0, 0x1f, 0x80, 0x1f, 0xc0,
  0x03, 0xc0, 0x3f, 0x00, 0x00, 0xf8, 0xfe, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f, 0xe0, 0x00,
  0x00, 0x1f, 0xe0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0xf0, 0xfe, 0x00,
  0x07, 0xc0, 0x3f, 0x00, 0x1f, 0x80, 0x0f, 0xc0, 0x73, 0x80, 0x07, 0xf0, 0x61, 0x80, 0x01, 0xf8,
  0x61, 0x80, 0x00, 0x7e, 0x61, 0x80, 0x00, 0x18, 0x7f, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//page counter
int page_counter = 0;
int buttonPressed = 0; //what button is pressed rock = 1 paper = 2 scissors =3
int cpSelection = 4;  //what the computer chose. 4 means that it can be any choice
String resultText;
//led pins
int greenPin = 7;
int redPin = 6;

const int num_bts = 3; //number of buttons;
int bts[num_bts];
int btNum[num_bts]; //each button will be represented by 1,2,3
boolean cur_[num_bts]; // current state for each button
boolean last_[num_bts];// last state for each button
int mySelection;// my choice represented as an int
String myText [] = {
  "Rock",
  "Paper",
  "Scissors"
};
String choiceText;
String cpText;



void setup() {
 Serial.begin(9600);
 display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS);
 randomSeed(analogRead(0));//randomizes the random function each reset of board
 pinMode(greenPin, OUTPUT);
 pinMode(redPin, OUTPUT);
 Serial.print("page_counter:  ");
 Serial.println(page_counter);
 for(int i = 0; i < num_bts; i++){
  bts[i] = i+47;
  btNum[i] = i+1;// bt num is in the 1,2,3 range
  pinMode(bts[i], INPUT); //makes all pins inputs
  cur_[i] = LOW; //makes the current states false
  last_[i] = LOW; //makes the last states false
 }

}


//landing screen
void landingScreen(String text, int x, int y, int size) {
  display.setTextSize(size);
  display.setTextColor(WHITE);
  display.setCursor(x, y);
  display.println(text);
  display.drawBitmap(0 , 35, rock_img , 32 , 32 , WHITE);
  display.drawBitmap(46 , 32, paper_img , 32 , 32 , WHITE);
  display.drawBitmap(88 , 35, scissors_img , 32 , 32 , WHITE);
  display.display();
}
//choose screen
void chooseScreen(String text, int x, int y, int size) {
  display.setTextSize(size);
  display.setTextColor(WHITE);
  display.setCursor(x, y);
  display.println(text);
  display.drawBitmap(0 , 35, rock_img , 32 , 32 , WHITE);
  display.drawBitmap(46 , 32, paper_img , 32 , 32 , WHITE);
  display.drawBitmap(88 , 35, scissors_img , 32 , 32 , WHITE);
  display.drawCircle(15, 20, 4, WHITE);
  display.drawCircle(60, 20, 4, WHITE);
  display.drawCircle(100, 20, 4, WHITE);
  display.display();
}
//mychoice screen
void mychoiceScreen(String text1, String text2, String text3, int x, int y, int size){
  display.setTextSize(size);
  display.setTextColor(WHITE);
  display.setCursor(x,y);
  display.println(text1);
  display.println(text2);
  display.println(text3);
  display.display();
}
//cp choice screen
void cpchoice(String text1, String text2, String text3, int x, int y, int size) {
  display.setTextSize(size);
  display.setTextColor(WHITE);
  display.setCursor(x,y);
  display.println(text1);
  display.println(text2);
  display.println(text3);
  display.display();
}
//resultscreen
void resultscreen(String text1, String text2, int x, int y, int size){
  display.setTextSize(size);
  display.setTextColor(WHITE);
  display.setCursor(x, y);
  display.println(text1);
  display.println(text2);
  display.display();
}



//debounce function
boolean debounce(boolean last, int bts) {
 boolean current = digitalRead(bts);
  if (last != current) {
    delay(5);
    boolean current = digitalRead(bts);
  }
  return current;
  }
  
//debounce and buttonPressed changer function
void buttonChanger (){
  // if any button is pressed, run debounce function, then change buttonPRessed to that button(int)
  if(buttonPressed == 0){
    for (int i = 0; i < num_bts; i++) 
     { 
      cur_[i] = debounce(last_[i], bts[i]);
      if(cur_[i] == HIGH && last_[i] == LOW){
      buttonPressed = btNum[i];// button pressed can be 1,2,3
      Serial.println(buttonPressed);
      }
       last_[i] = cur_[i]; // returns last state to cur state if nothing happens  
      
    }// debounce and button change ends
  }//if buttonPressed ends
}//function ends

//turns button pressed to my choice at selection page
int mychoice (){
    int choice = buttonPressed;
    return choice;
}

//page changer function
void pageChanger (){
   //changes page if button doesn't equal 0.
  if(buttonPressed != 0){
    page_counter = page_counter + 1;
    if (page_counter == 2){
        mySelection = mychoice();// 1,2,3
        choiceText = myText[mySelection-1];// rock is 0 in the myText array, so I need to put it back to 0,1,2
         Serial.print("  My choice:  ");
          Serial.println(choiceText);
        buttonPressed = 0;
    }
    else{
     buttonPressed = 0;
    Serial.print("page_counter:  ");
    Serial.println(page_counter);
    } 
  }
}
//return function
void pageReturn (){
  if(page_counter > 4) {
    page_counter = 0;
    cpSelection = 4;
    buttonPressed = 0;
    analogWrite(greenPin, LOW);
    analogWrite(redPin, LOW);
  }
}
//starts the random choice for computer at page 2
void cpretrieve(){
  if( mySelection != 0 && cpSelection == 4){
    cprandom();
    Serial.print(" computer chose: ");
    Serial.println(cpText);
  }
}
//randomizes cpSelection at page 2 returns the number.
int cprandom(){
 int cp = random(0,3);// in the 0,1,2 range
  cpSelection = cp+1; // get cp Selection to 1,2,3 range
  Serial.print(cpSelection);
  cpText = myText[cpSelection-1];// rock is 0 in the myText array, so I need to put it back to 0,1,2
}
//result logic
void resultLogic() {
  if( page_counter == 3){
    if ( mySelection == cpSelection) {
      resultText = "Tied";
      analogWrite(greenPin, 100);
      analogWrite(redPin, 100);
    }
    else if (mySelection == 2 &&  cpSelection  == 1|| mySelection == 1 && cpSelection == 3 || mySelection == 3 && cpSelection == 2){
      resultText = "Win";
      analogWrite(greenPin, 100);
    }
    else {
      resultText = "Lost";
      analogWrite(redPin, 100);
    }
  }
}

void loop() {
 buttonChanger();
 pageChanger();
 pageReturn();
 cpretrieve();
 resultLogic();
   switch(page_counter)
    {
    case 0:{
    display.clearDisplay();
    landingScreen("Rock, Paper, Scissors     By: Kyle B.        press anything to       continue", 0, 0, 1);
    break;
    }//case 0 ends
    case 1:{
    display.clearDisplay();
    chooseScreen("choose", 30, 0, 2);
    break;
    }//case 1 ends
    case 2:{
    display.clearDisplay();
    mychoiceScreen("Your  ","choice:      ", choiceText, 0, 0, 2);
    break;
    }//case 2 ends
    case 3: {
    display.clearDisplay();
    cpchoice("Computer's", "choice:     ", cpText, 0, 0, 2);
    break;
    }
    case 4:{
    display.clearDisplay();
    resultscreen("Result:", resultText, 0, 0 ,2);
    break;
    }
    }//switch ends
}//loop ends
