#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library.
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


// 'apexlogo', 32x32px
const unsigned char apex_logo [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x03, 0xc0, 0x00,
  0x00, 0x03, 0xc0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00,
  0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1e, 0x78, 0x00, 0x00, 0x3c, 0x3c, 0x00, 0x00, 0x38, 0x1e, 0x00,
  0x00, 0x78, 0x1e, 0x00, 0x00, 0x70, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x01, 0xe0, 0x07, 0x80,
  0x01, 0xe0, 0x07, 0x80, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0xe0, 0x07, 0xf0, 0x0f, 0xe0,
  0x07, 0xe0, 0x03, 0xe0, 0x03, 0x80, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'rock', 32x32px
const unsigned char rock_img [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
  0x00, 0x07, 0xfc, 0x00, 0x00, 0x3e, 0x0e, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x03, 0xc0, 0x03, 0x80,
  0x0f, 0x00, 0x0f, 0xc0, 0x1c, 0x00, 0x1f, 0xf0, 0x3e, 0x00, 0x3f, 0xf8, 0x3f, 0x00, 0xff, 0xfc,
  0x3f, 0x83, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xf8,
  0x1f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xfe, 0x00, 0x01, 0xff, 0xf0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'paper', 32x32px
const unsigned char paper_img [] PROGMEM = {
  0x1f, 0xff, 0xe0, 0x00, 0x38, 0x00, 0x78, 0x00, 0x30, 0x00, 0x3c, 0x00, 0x30, 0x00, 0x36, 0x00,
  0x30, 0x00, 0x33, 0x80, 0x30, 0x00, 0x31, 0xc0, 0x31, 0xfe, 0x30, 0xe0, 0x30, 0x00, 0x30, 0x70,
  0x30, 0x00, 0x30, 0x38, 0x30, 0x00, 0x3f, 0xfc, 0x30, 0x00, 0x00, 0x0c, 0x31, 0xff, 0xc0, 0x0c,
  0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c, 0x31, 0xff, 0xff, 0x8c,
  0x31, 0xff, 0xff, 0x8c, 0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c,
  0x31, 0xff, 0xff, 0x8c, 0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c,
  0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x7f, 0x8c, 0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c,
  0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x0c, 0x1f, 0xff, 0xff, 0xf8
};

// 'scissors', 32x32px
const unsigned char scissors_img [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x61, 0x80, 0x00, 0x1c,
  0x41, 0x80, 0x00, 0x7e, 0x61, 0x80, 0x01, 0xf8, 0x7f, 0x00, 0x07, 0xf0, 0x1f, 0x80, 0x1f, 0xc0,
  0x03, 0xc0, 0x3f, 0x00, 0x00, 0xf8, 0xfe, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f, 0xe0, 0x00,
  0x00, 0x1f, 0xe0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0xf0, 0xfe, 0x00,
  0x07, 0xc0, 0x3f, 0x00, 0x1f, 0x80, 0x0f, 0xc0, 0x73, 0x80, 0x07, 0xf0, 0x61, 0x80, 0x01, 0xf8,
  0x61, 0x80, 0x00, 0x7e, 0x61, 0x80, 0x00, 0x18, 0x7f, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//defining loading text on startup
void loadingText( int x, int y, int size) {
  display.setTextSize(size);
  display.setTextColor(WHITE);
  display.setCursor(x, y);
  display.drawBitmap(50 , 0 , apex_logo, 32, 32, WHITE);
  display.println("Booting SnekyOS .");
  display.display();
  delay(1000);
  display.setTextSize(size);
  display.setTextColor(WHITE);
  display.setCursor(x, y);
  display.drawBitmap(50 , 0 , apex_logo, 32, 32, WHITE);
  display.println("Booting SnekyOS ..");
  display.display();
  delay(1000);
  display.setTextSize(size);
  display.setTextColor(WHITE);
  display.setCursor(x, y);
  display.drawBitmap(50 , 0 , apex_logo, 32, 32, WHITE);
  display.println("Booting SnekyOS ...");
  display.display();
  delay(1000);
  Serial.println("SnekyOS successfully booted :)");
  display.display();
}

//landing screen
void landingScreen(String text, int x, int y, int size) {
  display.setTextSize(size);
  display.setTextColor(WHITE);
  display.setCursor(x, y);
  display.println(text);
  display.drawBitmap(0 , 35, rock_img , 32 , 32 , WHITE);
  display.drawBitmap(46 , 32, paper_img , 32 , 32 , WHITE);
  display.drawBitmap(88 , 35, scissors_img , 32 , 32 , WHITE);
  display.display();
}
//choose screen
void chooseScreen(String text, int x, int y, int size) {
  display.setTextSize(size);
  display.setTextColor(WHITE);
  display.setCursor(x, y);
  display.println(text);
  display.drawBitmap(0 , 35, rock_img , 32 , 32 , WHITE);
  display.drawBitmap(46 , 32, paper_img , 32 , 32 , WHITE);
  display.drawBitmap(88 , 35, scissors_img , 32 , 32 , WHITE);
  display.drawCircle(15, 20, 4, WHITE);
  display.drawCircle(60, 20, 4, WHITE);
  display.drawCircle(100, 20, 4, WHITE);
  display.display();
}
//mychoice screen
void mychoice(String text1, String text2, String text3, int x, int y, int size){
  display.setTextSize(size);
  display.setTextColor(WHITE);
  display.setCursor(x,y);
  display.println(text1);
  display.println(text2);
  display.println(text3);
  display.display();
}
//cp choice screen
void cpchoice(String text1, String text2, String text3, int x, int y, int size) {
  display.setTextSize(size);
  display.setTextColor(WHITE);
  display.setCursor(x,y);
  display.println(text1);
  display.println(text2);
  display.println(text3);
  display.display();
}
//resultscreen
void resultscreen(String text1,String text2, int x, int y, int size){
  display.setTextSize(size);
  display.setTextColor(WHITE);
  display.setCursor(x, y);
  display.println(text1);
  display.println(text2);
  display.display();
}




  //page counter
int page_counter = 1;
String buttonPressed = "Nothing"; //what button is pressed
String mySelection = "Nothing"; //what my selection is
String cpSelection = "Nothing"; //what the computer chose from the resultText(backwards)
String resultText;
  //defining Pins
  int greenPin = 7;
  int redPin = 6;
 
const int num_bts = 3; //number of buttons
int bts[num_bts];
String names[num_bts] = { // the table of possible names buttonPressed could be
  "Rock",
  "Paper",
  "Scissors"
};
String resultOutcomes[] = {// lookup table of results of 
  "Tied",
  "Lost",
  "Won",
};

boolean cur_[num_bts]; // current state for each button
boolean last_[num_bts];// last state for each button

void setup() {
  Serial.begin(9600);
  display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS);
  randomSeed(analogRead(0));//randomizes the random function each reset of board
  pinMode(greenPin, OUTPUT);
  pinMode(redPin, OUTPUT);
  int i;
  for (i = 0; i < num_bts; i = i + 1) {
    bts[i] = i + 47; //assigns bts [1] to be pin 47, bts[2] to be pin 48...
    Serial.println(bts[i]);// prints bts number
    pinMode(bts[i], INPUT); //makes all pins inputs
    cur_[i] = LOW; //makes the current states false
    last_[i] = LOW; //makes the last states false
    Serial.println(names[i]); //prints names of bts
  }
  display.clearDisplay();
  loadingText( 10, 30, 1);
}
//debounce function: make sure the current state is only current if the last state is low.
 boolean debounce(boolean last, int bts) {
 boolean current = digitalRead(bts);
  if (last != current) {
    delay(5);
    boolean current = digitalRead(bts);
  }
  return current;
  }
  
// exits menuforward function
void menuforward(){
  if(buttonPressed != "Nothing" && page_counter == 1){
    page_counter = 2;
    delay(100);
    buttonPressed = "Nothing";
    Serial.println("button returned to default");
  }
}

// exits my choice selection function
void choiceselection() {
  if(buttonPressed != "Nothing" && page_counter == 2){
    cprandom ();
    
    buttonPressed = "Nothing";
    Serial.println("button returned to default");
    page_counter = 3;
  }
}
// exits computer selection function
void cpselection(){
  if(buttonPressed != "Nothing" && page_counter == 3) {
    buttonPressed = "Nothing";
    page_counter = 4;
}
}
//goes to result screen, activates leds depending on result

void resultscreen (){
  if(buttonPressed != "Nothing" && page_counter == 4){
    page_counter = 5;
    buttonPressed = "Nothing";
    if(resultText == "Win") {
      analogWrite(greenPin, 100);
    }
    else if(resultText == "Lost"){
      analogWrite(redPin, 100);
    }
    else if (resultText == "Tied"){
      analogWrite(redPin, 100);
      analogWrite(greenPin, 100);
    }
  }
}
//return to 1st page function
void returnfunction (){
  if(buttonPressed != "Nothing" && page_counter == 5){
    page_counter = 1;
    buttonPressed = "Nothing";
    mySelection = "Nothing";
    cpSelection = "Nothing";
    analogWrite(redPin, LOW);
      analogWrite(greenPin, LOW);
  }
}

//cp randomizer function, if buttonPressed is anything, generate a random result(tie, win, loss), then make result dictate computer's choice.
void cprandom (){
    resultText = resultOutcomes[random(0,3)]; //generates outcome from a random function
  if(buttonPressed == "Rock" && page_counter == 2 ){
 
    if(resultText == "Tied"){
      cpSelection = "Rock";
    }
    else if (resultText == "Lost"){
      cpSelection = "Paper";
    }
    else if (resultText == "Win") {
      cpSelection = "Scissors";
    }
  }
  else if(buttonPressed == "Paper" && page_counter == 2) {
     
    if(resultText == "Tied"){
      cpSelection = "Paper";
    }
    else if(resultText == "Lost"){
      cpSelection = "Scissors";
    }
    else if(resultText == "Win"){
      cpSelection = "Rock";
    }
  }
  else if( buttonPressed == "Scissors" && page_counter == 2) {
  
    if(resultText == "Tied"){
      cpSelection = "Scissors";
    }
    else if(resultText == "Lost"){
      cpSelection = "Rock";
    }
    else if(resultText == "Win"){
      cpSelection = "Paper";
    }
  }
  Serial.print("computer chose:");
  Serial.println(cpSelection);
}

void loop() {
  int i;
  for (i = 0; i < num_bts; i = i + 1) {
   cur_[i] = debounce(last_[i], bts[i]);
   if(cur_[i] == HIGH && last_[i] == LOW){
    if (buttonPressed == "Nothing"){
      buttonPressed = names[i];
      mySelection = names[i];
      Serial.println(names[i]);
     
    }
   }
   last_[i] = cur_[i]; // returns last state to cur state if nothing happens
  }

menuforward ();
choiceselection();
cpselection();

resultscreen ();
returnfunction();


  //switch function to control pages, based on page_counter int value.
    switch(page_counter)
    {
    case 1:{
    display.clearDisplay();
    landingScreen("Rock, Paper, Scissors     By: Kyle B.        press anything to       continue", 0, 0, 1);
    break;
    }
    case 2:{
    display.clearDisplay();
    chooseScreen("choose", 30, 0, 2);
    break;
    }
    case 3:{
    display.clearDisplay();
    mychoice("Your  ","choice:      ", mySelection, 0, 0, 2);
    break;
    }
    case 4:{
    display.clearDisplay();
    cpchoice("Computer's", "choice:     ", cpSelection, 0, 0, 2);
    break;
    }
    case 5:{
     display.clearDisplay();
     resultscreen("Result:",resultText, 0, 0 ,2);
    }
    }//switch ends
}//loop ends
